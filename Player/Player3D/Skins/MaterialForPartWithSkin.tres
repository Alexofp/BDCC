[gd_resource type="ShaderMaterial" load_steps=6 format=2]

[ext_resource path="res://Player/Player3D/Parts/Body/HumanBody/body.png" type="Texture" id=1]
[ext_resource path="res://Player/Player3D/Skins/SoftSpikySkin/RahiSkin.png" type="Texture" id=2]
[ext_resource path="res://Player/Player3D/Skins/defaultoverlay.png" type="Texture" id=3]
[ext_resource path="res://Player/Player3D/Particles/cumlayer.png" type="Texture" id=4]

[sub_resource type="Shader" id=19]
code = "// NOTE: Shader automatically converted from Godot Engine 3.5.2.stable's SpatialMaterial.

shader_type spatial;
render_mode async_visible,blend_mix,depth_draw_alpha_prepass,cull_disabled,diffuse_toon,specular_disabled,unshaded;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform sampler2D texture_pattern : hint_albedo;
uniform sampler2D texture_customOverlay : hint_albedo;
uniform sampler2D texture_cumOverlay : hint_albedo;
uniform sampler2D texture_writings : hint_albedo;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec2 pattern_start;
uniform vec2 pattern_size;
uniform vec4 pattern_red_color : hint_color;
uniform vec4 pattern_blue_color : hint_color;
uniform vec4 pattern_green_color : hint_color;
uniform float random_shift;
uniform vec2 cum_scale;
uniform float cum_transparency;
uniform int cum_amount;
uniform vec4 cum_color : hint_color;

varying vec2 UV_pattern;

void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
	UV_pattern = UV*pattern_size+pattern_start;
}


void fragment() {
	vec2 base_uv = UV;
	
	vec4 pattern_tex = texture(texture_pattern,UV_pattern);
	float dumbLen = max(0.001, pattern_tex.r + pattern_tex.g + pattern_tex.b);
	pattern_tex.rgb = pattern_tex.rgb / dumbLen;
	//pattern_tex.rgb = normalize(pattern_tex.rgb);
	vec4 pattern_color = clamp(pattern_tex.r * pattern_red_color + pattern_tex.b * pattern_blue_color + pattern_tex.g * pattern_green_color, vec4(0.0), vec4(1.0));
	
	vec4 overlay_tex = texture(texture_customOverlay,base_uv);
	
	vec4 albedo_tex = texture(texture_albedo,base_uv) * vec4(pattern_color.rgb, 1.0);
	albedo_tex.rgb = mix(albedo_tex.rgb, overlay_tex.rgb, overlay_tex.a);//overlay_tex.rgb * overlay_tex.a + albedo_tex.rgb*(1.0 - overlay_tex.a);
	albedo_tex.a = max(albedo_tex.a, overlay_tex.a);
	
	vec4 writings_tex = texture(texture_writings,base_uv);
	albedo_tex.rgb = mix(albedo_tex.rgb, writings_tex.rgb, writings_tex.a);
//	vec4 writings_tex = texture(texture_writings, base_uv);
//	vec3 theAlbedo = albedo_tex.rgb;
//	vec3 lumCoef = vec3(0.2126, 0.7152, 0.0722);
//	float lum = dot(theAlbedo, lumCoef);
//	float threshold = 0.1;
//	float edge = 0.05; // softness around threshold
//	// t = 0 for dark, 1 for bright; invert to get white-on-dark
//	float t = smoothstep(threshold - edge, threshold + edge, lum);
//	vec3 ink = mix(vec3(1.0), vec3(0.0), t);
//	albedo_tex.rgb = mix(theAlbedo, ink, writings_tex.a);
	
	for (int i = 1;i<=5;i++)
	{
		if(i <= cum_amount){
			float fi = float(i*i) / 10.0;
			vec4 cum_tex = cum_color * texture(texture_cumOverlay, vec2(fi, fi) + (base_uv * pattern_size) * cum_scale - vec2(random_shift, TIME + sin(TIME))/300.0);
			albedo_tex.rgb = mix(albedo_tex.rgb, cum_tex.rgb, cum_tex.a * cum_transparency);
		}
	}

	ALBEDO = albedo.rgb * albedo_tex.rgb;
	ALPHA = albedo.a * albedo_tex.a;// * pattern_color.a;
}
"

[resource]
resource_local_to_scene = true
resource_name = "bodywide.png"
shader = SubResource( 19 )
shader_param/albedo = Color( 1, 1, 1, 1 )
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/pattern_start = Vector2( 0, 0 )
shader_param/pattern_size = Vector2( 0.125, 0.25 )
shader_param/pattern_red_color = Color( 0.0784314, 0.298039, 0.0980392, 1 )
shader_param/pattern_blue_color = Color( 0.596078, 0.270588, 0.270588, 1 )
shader_param/pattern_green_color = Color( 0.596078, 0.270588, 0.270588, 1 )
shader_param/random_shift = null
shader_param/cum_scale = 5.0
shader_param/cum_transparency = 0.0
shader_param/cum_amount = 1
shader_param/cum_color = Color( 1, 1, 1, 1 )
shader_param/texture_albedo = ExtResource( 1 )
shader_param/texture_pattern = ExtResource( 2 )
shader_param/texture_customOverlay = ExtResource( 3 )
shader_param/texture_cumOverlay = ExtResource( 4 )
shader_param/texture_writings = ExtResource( 3 )
